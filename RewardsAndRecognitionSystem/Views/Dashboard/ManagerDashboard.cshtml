@using RewardsAndRecognitionRepository.Models
@using RewardsAndRecognitionRepository.Enums
@using RewardsAndRecognitionSystem.Common
@model IEnumerable<Nomination>
<script src="~/lib/Charts/chart.js"></script>
<script src="~/lib/Charts/chartjs-plugin-datalabels.js"></script>

<script>
    const viewCount = sessionStorage.getItem('viewCount');
</script>

@{
    ViewData["Title"] = "Manager Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var total = ViewBag.TotalNominations;
    var approved = ViewBag.FinalApprovedNominations;
    var rejected = ViewBag.FinalRejectedNominations;
    var pending = total - (approved + rejected);


    var teams = ViewBag.TeamsUnderManager as List<dynamic>;
    var selectedTeamId = ViewBag.SelectedTeamId as string;
    var selectedTeamNominations = ViewBag.SelectedTeamNominations as List<Nomination> ?? new();
    var selectedTeamName = teams?.FirstOrDefault(t => t.TeamId.ToString() == selectedTeamId)?.TeamName ?? "";

    var leaderboard = teams
        .Select(t => new
        {
            TeamName = t.TeamName,
            Count = Model.Count(n => n.Status == NominationStatus.DirectorApproved && n.Nominee?.Team?.Name == t.TeamName)
        })
        .OrderByDescending(t => t.Count)
        .ToList();

    var maxCount = leaderboard.Any() ? leaderboard.Max(l => l.Count) : 1;
}


<div class="d-flex align-items-center justify-content-between mb-4 flex-wrap">
    <h2 class="mb-0"><i class="bi bi-person-badge"></i> Manager Dashboard</h2>
    <div class="d-flex align-items-center gap-3 flex-wrap">
        <div>
            <label for="yearDropdown" class="form-label mb-1">Select Year :</label>
            <select id="yearDropdown" class="form-select form-select-sm">
                <option value="">-- Select Year --</option>
            </select>
        </div>
        <div>
            <label for="quarterDropdown" class="form-label mb-1">Select Quarter :</label>
            <select id="quarterDropdown" class="form-select form-select-sm" disabled>
                <option value="">-- Select Quarter --</option>
            </select>
        </div>
    </div>
</div>


<style>

    .dashboard-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 20px;
        transition: transform 0.2s ease;
        height: 100%;
        text-decoration: none;
    }

        .dashboard-card:hover {
            transform: translateY(-3px);
            text-decoration: none;
        }

    .dashboard-title {
        font-size: 1rem;
        font-weight: 600;
        color: #555;
    }

    .dashboard-value {
        font-size: 1.75rem;
        font-weight: bold;
        margin-top: 5px;
    }

    .bar-container {
        margin-top: 30px;
    }

    .bar {
        height: 14px;
        border-radius: 6px;
        margin-bottom: 10px;
        transition: width 0.3s ease;
    }

    .text-blue {
        color: #2962FF;
    }

    .text-green {
        color: #2E7D32;
    }

    .text-orange {
        color: #F9A825;
    }

    .text-red {
        color: #FF0000;
    }

    .analytics-btn {
        font-weight: 600;
        font-size: 1.1rem;
        padding: 0.5rem 1.3rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 8px rgba(41, 98, 255, 0.3);
        transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .analytics-btn:hover {
            background-color: #1a53ff;
            box-shadow: 0 6px 15px rgba(41, 98, 255, 0.6);
            transform: translateY(-2px);
            text-decoration: none;
            color: white;
        }

        .analytics-btn i {
            transition: transform 0.3s ease;
        }

        .analytics-btn:hover i {
            transform: translateX(4px);
        }

</style>

<!-- Summary Cards -->
<div class="row g-4 mb-4">
    <div class="col-md-3">
        <a href="#" onclick="navigateToNominations('all')" class="dashboard-card text-blue d-block text-decoration-none" ">
            <div class="dashboard-title">Total Nominations</div>
            <div class="dashboard-value" style="color: #007bff;">@ViewBag.TotalNominations</div> <!-- Blue -->
        </a>
    </div>
    <div class="col-md-3">
        <a href="#" onclick="navigateToNominations('pending')" class="dashboard-card d-block text-decoration-none">
            <div class="dashboard-title">Pending Reviews</div>
            <div class="dashboard-value" style="color: #fd7e14;">@ViewBag.PendingNominations</div> <!-- Orange -->
        </a>
    </div>
    <div class="col-md-3">
        <a href="#" onclick="navigateToNominations('directorapproved')" class="dashboard-card d-block text-decoration-none">
            <div class="dashboard-title">Final Approved</div>
            <div class="dashboard-value" style="color: #28a745;">@ViewBag.FinalApprovedNominations</div> <!-- Green -->
        </a>
    </div>
    <div class="col-md-3">
        <a href="#" onclick="navigateToNominations('directorrejected')" class="dashboard-card d-block text-decoration-none">
            <div class="dashboard-title">Final Rejected</div>
            <div class="dashboard-value text-danger">@ViewBag.FinalRejectedNominations</div>
        </a>
    </div>
</div>

@{
    var chartIndex = 0;
    var teamChartData = ViewBag.TeamStatusData;
}
@{
    var data = teamChartData as IEnumerable<dynamic>;
    var hasData = data != null && data.Any(t =>
    Convert.ToInt32(t.Approved) +
    Convert.ToInt32(t.Rejected) +
    Convert.ToInt32(t.Pending) > 0);
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="mt-5"><i class="bi bi-bar-chart-line-fill"></i> Team Wise Statistics</h4>
    @if (hasData)
    {
        <a asp-controller="Analytics"
           asp-action="Index"
           asp-route-yearQuarterId="@ViewBag.CurrentQuarterId"
           class="btn btn-info analytics-btn mt-5">
            <i class="bi bi-graph-up-arrow"></i> View Analytics
        </a>
    }
</div>



<!-- Chart CSS -->
<style>

    .chart-wrapper {
        height: 275px;
        max-width: 250px;
        margin: 0 auto;
    }

        .chart-wrapper canvas {
            width: 100% !important;
            height: 100% !important;
        }

    .card {
        min-height: 300px;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        text-align: center;
    }
</style>

<div class="container">
    <div class="row">
        @foreach (var team in teamChartData)
        {
            var chartId = $"barChart_{chartIndex}";
            var approvedNominations = Convert.ToInt32(team.Approved);
            var rejectedNominations = Convert.ToInt32(team.Rejected);
            var pendingNominations = Convert.ToInt32(team.Pending);
            var totalNominations = approvedNominations + rejectedNominations + pendingNominations;
            if (totalNominations > 0)
            {
                <div class="col-md-4 mb-4">
                    <div class="card p-3 shadow-sm">
                        <h6 class="text-center mb-2">@team.TeamName - @totalNominations Nominations</h6>
                        <div class="chart-wrapper">
                            <canvas id="@chartId" width="300" height="250"></canvas>
                        </div>
                    </div>
                </div>

                <script>
                    const ctx_@chartIndex = document.getElementById('@chartId').getContext('2d');

                    Chart.register(ChartDataLabels);

                    new Chart(ctx_@chartIndex, {
                        type: 'bar',
                        data: {
                            labels: ['Approved', 'Rejected', 'Pending'],
                            datasets: [{
                                data: [@approvedNominations, @rejectedNominations, @pendingNominations],
                                backgroundColor: ['#4caf50', '#f44336', '#ffeb3b'],  // Green for Approved, Red for Rejected, Yellow for Pending
                                borderColor: ['#388e3c', '#d32f2f', '#fbc02d'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            plugins: {
                                legend: { display: false },
                                datalabels: {
                                    color: 'black',
                                    anchor: 'center',
                                    align: 'center',
                                    font: {
                                        weight: 'bold',
                                        size: 14
                                    },
                                    formatter: function (value) {
                                        return value > 0 ? value : ''; // Hide label if value is 0
                                    }
                                },
                                tooltip: { enabled: true },
                                title: { display: false }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: { precision: 0 }
                                }
                            }
                        },
                        plugins: [ChartDataLabels]
                    });
                </script>
            }
            chartIndex++;
        }
        @* Show message if no team has nominations *@
      
        @if (!hasData)
        {
            <div class="col-12">
                <div class="alert alert-light border rounded-3 shadow-sm text-center py-4 my-3" style="max-width: 500px; margin: 0 auto;">
                    <h5 class="mt-2 mb-1 text-dark fw-semibold">@GeneralMessages.No_Nominations_This_Quarter</h5>
                </div>
            </div>
        }
    </div>
</div>
@* Enhanced Teams Accordion *@
<h4 class="mt-5 mb-4 fw-bold text-dark">
    <i class="bi bi-people-fill me-2"></i> Teams Under You
</h4>

<div class="accordion shadow-sm rounded" id="teamsAccordion">
    @for (int i = 0; i < teams.Count; i++)
    {
        var team = teams[i];
        var collapseId = $"collapseTeam{i}";
        var headingId = $"headingTeam{i}";
        <div class="accordion-item border-0 mb-2 shadow-sm rounded-3 overflow-hidden">
            <h2 class="accordion-header" id="@headingId">
                <button class="accordion-button collapsed bg-light fw-semibold" type="button" data-bs-toggle="collapse"
                        data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                    @team.TeamName
                </button>
            </h2>
            <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#teamsAccordion">
                <div class="accordion-body bg-white">
                    <p class="mb-2"><strong class="text-secondary">Team Lead:</strong> @team.TeamLeadName</p>

                    <p class="mb-2 fw-semibold text-secondary">Category-wise Nominations:</p>
                    <ul class="list-group list-group-flush">
                        @{
                            var currentQuarterId = ViewBag.CurrentQuarterId as Guid?;
                            var teamNominations = Model.Where(n =>
                            n.Nominee?.Team?.Id == team.TeamId &&
                            currentQuarterId.HasValue && n.YearQuarterId == currentQuarterId.Value);
                            var categoryGroups = teamNominations
                            .GroupBy(n => n.Category?.Name)
                            .OrderBy(g => g.Key);
                        }

                        @if (categoryGroups.Any())
                        {
                            foreach (var categoryGroup in categoryGroups)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center px-3">
                                    <span class="text-capitalize">@categoryGroup.Key</span>
                                    <span class="badge bg-gradient bg-primary px-3 py-1 fs-6 rounded-pill">@categoryGroup.Count()</span>
                                </li>
                            }
                        }
                        else
                        {
                            <p class="text-muted fst-italic text-center mb-0">
                                <i class="bi bi-exclamation-circle me-1"></i> No nominations available.
                            </p>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

<!-- View Nominations by Team (AJAX) -->
<h4 class="mt-5"><i class="bi bi-info-circle-fill"></i> View Nominations by Team</h4>
<div class="mb-4 d-flex align-items-center gap-3">
    <label class="form-label mb-0"><strong>Select Team:</strong></label>
    <select id="teamSelect" class="form-select w-auto">
        <option value="">-- Choose a team --</option>
        @foreach (var team in teams)
        {
            <option value="@team.TeamId">@team.TeamName</option>
        }
    </select>
</div>

<!-- Modal Container -->
<div class="modal fade" id="teamNominationsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content" id="teamModalContent">
            <!-- Content will be loaded via AJAX -->
        </div>
    </div>
</div>
@section Scripts {

    <script>
        $(document).ready(function () {
            loadYears();
            $('#yearDropdown').change(function () {
                const year = $(this).val();
                if (year) loadQuarters(year);
                else $('#quarterDropdown').prop('disabled', true).html('<option>-- Select Quarter --</option>');
            });
            $('#quarterDropdown').change(function () {
                const quarterId = $(this).val();
                if (quarterId) {
                    window.location.href = `/Dashboard/Index?yearQuarterId=${quarterId}`;
                }
            });
            // Removed the currentYear setting from here and moved inside loadYears()
        });

        function loadYears() {
            $.get('/Dashboard/GetYears', function (years) {
                let options = '<option value="">-- Select Year --</option>';
                years.forEach(y => {
                    options += `<option value="${y}">${y}</option>`;
                });
                $('#yearDropdown').html(options);
                // Now set current year and load quarters AFTER years are loaded
                const currentYear = '@ViewBag.CurrentYear';
                const currentQuarterId = '@ViewBag.CurrentQuarterId';
                if (currentYear) {
                    $('#yearDropdown').val(currentYear);
                    loadQuarters(currentYear, currentQuarterId);
                }
            });
        }

        function loadQuarters(year, selectedId) 
        {
            $.get(`/Dashboard/GetQuarters?year=${year}`, function (quarters) {
                let options = '<option value="">-- Select Quarter --</option>';
                quarters.forEach(q => {
                    options += `<option value="${q.id}" ${q.id === selectedId ? 'selected' : ''}>${q.name}</option>`;
                });
                $('#quarterDropdown').prop('disabled', false).html(options);
            });
        }
    </script>
    <script>
        function navigateToNominations(filter) 
        {
            const quarterId = document.getElementById("quarterDropdown")?.value;

            if (!quarterId) {
                alert("Please select a quarter.");
                return;
            }

            const url = `/Nomination/Index?filter=${filter}&yearQuarterId=${quarterId}`;
            window.location.href = url;
        }
    </script>




    <script>
           document.getElementById("teamSelect").addEventListener("change", function () {
            const teamId = this.value;
            const year = document.getElementById("yearDropdown").value;
            const quarterId = document.getElementById("quarterDropdown").value;

            if (!teamId || !year || !quarterId) {
                alert("Please select year and quarter first");
                return;
            }

            fetch(`/Dashboard/GetTeamNominations?teamId=${teamId}&year=${year}&quarterId=${quarterId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Failed to fetch nominations");
                    return response.text();
                })
                .then(html => {
                    document.getElementById("teamModalContent").innerHTML = html;
                    const modal = new bootstrap.Modal(document.getElementById("teamNominationsModal"));
                    modal.show();
                })
                .catch(error => {
                    alert("Error loading nominations: " + error.message);
                });
        });

    </script>


    <script>
            document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById("teamNominationsModal");
            if (modalElement) {
                modalElement.addEventListener('hidden.bs.modal', function () {
                    // Reset dropdown on modal close
                    const teamSelect = document.getElementById("teamSelect");
                    if (teamSelect) {
                        teamSelect.selectedIndex = 0;
                    }

                    // Clean the URL (remove teamId query param)
                    const url = new URL(window.location);
                    url.searchParams.delete("teamId");
                    window.history.replaceState({}, document.title, url);
                });
            }
        });

      
                 // 🔍 Filter nominations table by nominee name
        function filterNominations() 
        {
            const input = document.getElementById("searchInput");
            const filter = input.value.toLowerCase();
            const table = document.getElementById("nominationsTable");
            const rows = table.getElementsByTagName("tr");

            let matchFound = false;

            // Loop through table rows (skip header row at index 0)
            for (let i = 1; i < rows.length; i++) 
            {
                const nomineeCell = rows[i].getElementsByTagName("td")[1];
                if (nomineeCell) {
                    const name = nomineeCell.textContent || nomineeCell.innerText;
                    if (name.toLowerCase().includes(filter)) {
                        rows[i].style.display = "";
                        matchFound = true;
                    } else {
                        rows[i].style.display = "none";
                    }
                }
            }

            // Handle "No matches found" row
            let noMatchRow = document.getElementById("noMatchRow");
            if (!noMatchRow) {
                noMatchRow = document.createElement("tr");
                noMatchRow.id = "noMatchRow";
                noMatchRow.innerHTML = `<td colspan="${rows[0].cells.length}" style="text-align:center; font-weight:bold;">No matches found</td>`;
                table.querySelector("tbody").appendChild(noMatchRow);
            }

            // Show or hide the "No matches found" row
            noMatchRow.style.display = matchFound ? "none" : "";
        }

    </script>
}




