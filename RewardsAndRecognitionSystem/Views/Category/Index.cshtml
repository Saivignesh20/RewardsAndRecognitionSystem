@model IEnumerable<RewardsAndRecognitionSystem.ViewModels.CategoryViewModel>

@{
    ViewData["Title"] = "Categories";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --indigo-main: #3f51b5;
        --indigo-light: #5c6bc0;
        --indigo-dark: #303f9f;
        --danger: #c62828;
        --danger-hover: #b71c1c;
        --gray: #6c757d;
        --text-light: #fff;
    }

    .btn {
        padding: 8px 14px;
        border-radius: 5px;
        font-size: 0.875rem;
        font-weight: 500;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        border: none;
        transition: transform 0.2s ease;
        white-space: nowrap;
    }

    .btn-indigo {
        background: var(--indigo-main);
        color:white;
    }

        .btn-indigo:hover {
            background: var(--indigo-dark);
            color: white;
        }

    .btn-secondary {
        background: var(--gray);
        
    }

        .btn-secondary:hover {
            background: #5a6268;
            
        }

    .btn-danger {
        background: var(--danger);
        color: var(--text-light);
    }

        .btn-danger:hover {
            background: var(--danger-hover);
            
        }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

        .table-custom th,
        .table-custom td {
            padding: 14px 16px;
            text-align: left;
            vertical-align: middle;
        }

        .table-custom th {
            background: linear-gradient(to right, var(--indigo-main), var(--indigo-light));
            color: white;
            font-weight: 600;
        }

        .table-custom tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        .table-custom tr:hover {
            background-color: #eef1f7;
        }

    .actions-cell {
        white-space: nowrap;
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .desc-cell {
        max-width: 280px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>



<div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
    <h2 class="mb-4"><i class="bi bi-tags-fill me-2"></i>Categories</h2>

    <div></div>  

    <div class="d-flex align-items-center gap-3">
        <div class="form-check form-switch m-0">
            <input class="form-check-input" type="checkbox" role="switch" id="toggleCategoryFilter"
                   @(ViewBag.ShowDeleted ? "checked" : "") />
            <label class="form-check-label ms-2" for="toggleCategoryFilter">
                Show Deleted
            </label>
        </div>

        <a asp-action="Create" class="btn btn-indigo d-inline-flex align-items-center gap-2">
            <i class="bi bi-plus-circle-fill"></i> New Category
        </a>
    </div>
</div>

<div id="categoryListContainer">
    @Html.Partial("_CategoryListPartial", Model)
</div>
<script type="text/javascript">
    const categoriesInNominations = @Html.Raw(ViewBag.CategoryIdsJson);
</script>

<script>
       function confirmDelete(categoryId) 
       {
            // Force blur the Delete button BEFORE the popup opens
            const activeBtn = document.activeElement;
            if (activeBtn) {
                activeBtn.blur();
            }

            Swal.fire({
                title: 'Are you sure?',
                text: "This action cannot be undone.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true,
                allowOutsideClick: true,
                focusConfirm: false,
                focusCancel: false,
                didOpen: () => {
                    // Extra guard to make sure nothing stays focused
                    setTimeout(() => document.activeElement?.blur(), 10);
                },
                didClose: () => {
                    // Make sure focus does not return to the previously focused Delete button
                    setTimeout(() => document.activeElement?.blur(), 10);
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Category/Delete/' + categoryId;

                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        const hiddenToken = document.createElement('input');
                        hiddenToken.type = 'hidden';
                        hiddenToken.name = '__RequestVerificationToken';
                        hiddenToken.value = token.value;
                        form.appendChild(hiddenToken);
                    }

                    document.body.appendChild(form);
                    form.submit();
                }
        });
    }




</script>
<script src="~/lib/ValidationScriptsPartial/jquery-3.6.4.min.js"></script>
<script>
    $(document).on("click", ".pagination-link", function (e) {
        e.preventDefault();
        var url = $(this).attr("href");

        $.ajax({
            url: url,
            type: "GET",
            headers: { "X-Requested-With": "XMLHttpRequest" },
            success: function (result) {
                $('#categoryListContainer').html(result);
            },
            error: function () {
                alert("Failed to load category data.");
            }
        });
    });
    document.getElementById("toggleCategoryFilter")?.addEventListener("change", function () {
        const showDeleted = this.checked;
        window.location.href = `/Category/Index?showDeleted=${showDeleted}`;
    });
</script>
<style>
    .form-switch .form-check-input:checked {
        background-color: var(--danger);
        border-color: var(--danger-hover);
    }
</style>