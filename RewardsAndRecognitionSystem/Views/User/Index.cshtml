@model IEnumerable<RewardsAndRecognitionSystem.ViewModels.UserViewModel>
@{
    var userRoles = ViewBag.UserRoles as Dictionary<string, string>;
    ViewData["Title"] = "Users List";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Users";
}

<style>
    :root {
        --indigo-main: #3f51b5;
        --indigo-light: #5c6bc0;
        --indigo-dark: #303f9f;
        --danger: #c62828;
        --danger-hover: #b71c1c;
        --text-light: #fff;
    }

    .user-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 30px 0 20px;
    }
    


    .create-btn {
        color: var(--text-light);
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

        .create-btn:hover {
            background: var(--indigo-dark);
            color: var(--text-light);
        }

    .users-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        overflow: hidden;
    }

        .users-table th, .users-table td {
            padding: 14px 16px;
            text-align: left;
        }

        .users-table th {
            background: linear-gradient(to right, var(--indigo-main), var(--indigo-light));
            color: white;
            font-weight: 600;
        }

        .users-table tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        .users-table tr:hover {
            background-color: #eef1f7;
        }

    .btn {
        padding: 8px 14px;
        border: none;
        border-radius: 5px;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        transition: background-color 0.3s ease;
    }

    .btn-edit {
        background: var(--indigo-main);
        color: var(--text-light);
    }

        .btn-edit:hover {
            background: var(--indigo-dark);
            color: white;
        }

    .btn-delete {
        background: var(--danger);
        color: white;
    }

        .btn-delete:hover {
            background: var(--danger-hover);
            color: white;
        }
</style>

<div class="user-header d-flex justify-content-between align-items-center mb-3" style="gap: 20px;">
    <h2 style="margin: 0;"><i class="bi bi-people-fill me-2"></i> Users</h2>

    <div class="d-flex align-items-center" style="gap: 12px;">
        

        <a asp-action="ExportAllUsersOpenXml" class="btn btn-success">
            <i class="bi bi-file-earmark-excel"></i> Export
        </a>

        <a asp-action="Create" class="btn btn-primary d-flex align-items-center" style="padding: 8px 14px; text-decoration: none;">
            <i class="bi bi-person-plus-fill me-1"></i> Create
        </a>
    </div>
</div>

<div id="userTableContainer">
    @await Html.PartialAsync("_UserListPartial", Model)
</div>

<div class="d-flex justify-content-center mt-4" id="paginationContainer">
    @await Html.PartialAsync("_PaginationPartial", ((int)ViewBag.CurrentPage, (int)ViewBag.TotalPages, (string)ViewBag.ActionName))
</div>


@section Scripts {
    <script>
        function confirmDelete(userId) {
          Swal.fire({
            title: 'Are you sure?',
            text: "This action cannot be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true
          }).then((result) => {
            if (result.isConfirmed) {
              const form = document.createElement('form');
              form.method = 'POST';
              form.action = '/User/Delete/' + userId;
              const token = document.querySelector('input[name="__RequestVerificationToken"]');
              if (token) {
                const hiddenToken = document.createElement('input');
                hiddenToken.type = 'hidden';
                hiddenToken.name = '__RequestVerificationToken';
                hiddenToken.value = token.value;
                form.appendChild(hiddenToken);
              }
              document.body.appendChild(form);
              form.submit();
            }
          });
        }
    </script>
    <script src="~/js/Nomination.js">

    </script>
    <script>
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("pagination-link")) {
                e.preventDefault();
                const url = e.target.getAttribute("href");

                fetch(url, {
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    }
                })
                .then(response => response.text())
                .then(html => {
                    document.getElementById("userTableContainer").innerHTML = html;
                    return fetch(url + "&paginationOnly=true", {
                        headers: {
                            "X-Requested-With": "XMLHttpRequest"
                        }
                    });
                })
                .then(response => response.text())
                .then(paginationHtml => {
                    document.getElementById("paginationContainer").innerHTML = paginationHtml;
                });
            }
        });
    </script>
    <script>
            <div class="d-flex justify-content-center mt-4">
            <nav>
                <ul class="pagination">
                    @if ((int)ViewBag.CurrentPage > 1)
                    {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = (int)ViewBag.CurrentPage - 1 })">
                                        <i class="bi bi-chevron-left"></i>
                                    </a>
                                </li>
                    }
                    <li class="page-item active">
                        <span class="page-link">
                            Page @(ViewBag.CurrentPage) of @(ViewBag.TotalPages)
                        </span>
                    </li>

                    @if ((int)ViewBag.CurrentPage < (int)ViewBag.TotalPages)
                    {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = (int)ViewBag.CurrentPage + 1 })">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                    }
                </ul>
            </nav>
        </div>
    </script>
}